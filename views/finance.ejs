<!DOCTYPE html>
<html data-bs-theme="light" lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, shrink-to-fit=no">
    <title>Dashboard - business 360°</title>
    <link rel="stylesheet" href="assets/bootstrap/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Nunito:200,200i,300,300i,400,400i,600,600i,700,700i,800,800i,900,900i&amp;display=swap">
    <link rel="stylesheet" href="assets/fonts/fontawesome-all.min.css">
    <link rel="stylesheet" href="assets/css/Billing-Table-with-Add-Row--Fixed-Header-Feature.css">
    <link rel="stylesheet" href="assets/css/Contact-Form-by-Moorcam.css">
    <link rel="stylesheet" href="assets/css/Features-Cards-icons.css">
    <link rel="stylesheet" href="assets/css/Pretty-Table-tables.css">
    <link rel="stylesheet" href="assets/css/Pretty-Table.css">
    <link rel="stylesheet" href="assets/css/Profile-Edit-Form-styles.css">
    <link rel="stylesheet" href="assets/css/Profile-Edit-Form.css">
    <style>
        /* Custom styles to fix UI glitches */
        .text-purple {
            color: #6f42c1;
        }
        .border-purple {
            border-color: #6f42c1;
        }
        body {
            overflow-x: hidden;
        }
        #wrapper {
            display: flex;
            width: 100%;
        }
        #content-wrapper {
            width: 100%;
            overflow-x: hidden;
        }
        .card {
            transition: transform 0.3s ease;
        }
        .card:hover {
            transform: translateY(-5px);
        }
        @media (max-width: 768px) {
            .col-md-4 {
                margin-bottom: 15px;
            }
        }
    </style>
</head>

<body id="page-top">
     <div id="wrapper">
        <nav class="navbar align-items-start sidebar sidebar-dark accordion bg-gradient-primary p-0 navbar-dark">
            <div class="container-fluid d-flex flex-column p-0"><a class="navbar-brand d-flex justify-content-center align-items-center sidebar-brand m-0" href="#">
                    <div class="sidebar-brand-icon rotate-n-15"><i class="fas fa-laugh-wink"></i></div>
                    <div class="sidebar-brand-text mx-3"><span>business 360°</span></div>
                </a>
                <hr class="sidebar-divider my-0">
                <ul class="navbar-nav text-light" id="accordionSidebar">
                    <li class="nav-item"><a class="nav-link" href="/"><i class="fas fa-tachometer-alt"></i><span>Dashboard</span></a></li>
                    <li class="nav-item"><a class="nav-link" href="/profile"><i class="fas fa-user"></i><span>Profile</span></a></li>
                    <li class="nav-item"><a class="nav-link" href="/employee"><i class="fas fa-table"></i><span>Employee</span></a></li>
                    <li class="nav-item"><a class="nav-link" href="/inventory"><i class="fas fa-boxes fa-fw me-2"></i><span>Inventory</span></a></li>
                    <li class="nav-item"><a class="nav-link" href="/billing"> <i class="fas fa-file-invoice-dollar fa-fw me-2"></i><span>Billing</span></a></li>
                    <li class="nav-item"><a class="nav-link" href="/sales"> <i class="fas fa-chart-bar fa-fw me-2"></i><span>Sales dashboard</span></a></li>
                    <li class="nav-item"><a class="nav-link" href="/finance"><i class="fas fa-money-bill-wave fa-fw me-2"></i><span>fiance dashboard</span></a></li>
                </ul>
                <div class="text-center d-none d-md-inline"><button class="btn rounded-circle border-0" id="sidebarToggle" type="button"></button></div>
            </div>
        </nav>
       <div class="d-flex flex-column" id="content-wrapper">
            <div id="content">
                <nav class="navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow">
                    <div class="container-fluid">
                        <!-- Sidebar Toggle -->
                        <button class="btn btn-link d-md-none rounded-circle me-3" id="sidebarToggleTop" type="button">
                            <i class="fas fa-bars"></i>
                        </button>
                        
                        <!-- Greeting - Responsive -->
                        <div class="d-flex align-items-center flex-grow-1">
                            <div class="me-3">
                                <h5 class="mb-0 text-gray-800 d-flex align-items-center">
                                    <i class="fas fa-sun text-warning me-2" id="greetingIcon"></i>
                                    <span class="d-none d-sm-inline" id="greetingText">Good Morning,</span>
                                 </h5>
                                <small class="text-muted d-none d-md-inline">Welcome back to your business dashboard</small>
                            </div>
                        </div>
                        
                        <!-- Right side of navbar -->
                        <ul class="navbar-nav ms-auto">
                            <!-- Calendar - Responsive -->
                            <li class="nav-item">
                                <div class="d-flex align-items-center px-3 py-2 bg-light rounded-pill" id="dateContainer">
                                    <i class="fas fa-calendar-day text-primary me-2"></i>
                                    <span class="me-1 fw-semibold d-none d-sm-inline">Today:</span>
                                    <span class="d-none d-md-inline" id="fullDate">Thursday, July 10, 2025</span>
                                    <span class="d-inline d-md-none" id="shortDate">Jul 10</span>
                                </div>
                            </li>
                        </ul>
                    </div>
                </nav> 
                <!--*******************************************************************************************************************************************************************************************************************************************************-->
  <!--card section                 card section -->
                <div class="container my-4">
                    <h4 class="mb-4"><span role="img" aria-label="chart">📊</span> Financial Insights</h4>
                    <div class="row g-4">
                        <!-- Total Revenue -->
                        <div class="col-md-4">
                            <div class="card border-primary shadow h-100">
                                <div class="card-body">
                                    <h5 class="card-title"><span role="img" aria-label="coins">🪙</span> Total Revenue</h5>
                                    <p class="card-text text-muted">Total money earned (sales + other income)</p>
                                    <h3 class="text-primary">₹<%= typeof totalRevenue !== 'undefined' ? totalRevenue.toLocaleString('en-IN', {minimumFractionDigits:2, maximumFractionDigits:2}) : '0.00' %></h3>
                                </div>
                            </div>
                        </div>
                        <!-- Total Expenses -->
                        <div class="col-md-4">
                            <div class="card border-danger shadow h-100">
                                <div class="card-body">
                                    <h5 class="card-title"><span role="img" aria-label="expenses">💸</span> Total Expenses</h5>
                                    <p class="card-text text-muted">All types of business expenses (inventory, rent, salary, etc.)</p>
                                    <h3 class="text-danger">₹<%= typeof totalExpenses !== 'undefined' ? totalExpenses.toLocaleString('en-IN', {minimumFractionDigits:2, maximumFractionDigits:2}) : '0.00' %></h3>
                                </div>
                            </div>
                        </div>
                        <!-- Net Profit / Loss -->
                        <div class="col-md-4">
                            <div class="card border-success shadow h-100">
                                <div class="card-body">
                                    <h5 class="card-title"><span role="img" aria-label="profit">💰</span> Net Profit / Loss</h5>
                                    <p class="card-text text-muted">Revenue - Expenses</p>
                                    <h3 class="text-success">₹<%= typeof netProfitOrLoss !== 'undefined' ? netProfitOrLoss.toLocaleString('en-IN', {minimumFractionDigits:2, maximumFractionDigits:2}) : '0.00' %></h3>
                                </div>
                            </div>
                        </div>
                        <!-- Target (Sales Target of This Month) -->
                        <div class="col-md-4">
                            <div class="card border-purple shadow h-100">
                                <div class="card-body">
                                    <h5 class="card-title"><span role="img" aria-label="target">🎯</span> Target</h5>
                                    <p class="card-text text-muted">Sales target of this month</p>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h3 class="text-purple mb-0">₹<%= typeof salesTarget !== 'undefined' ? salesTarget.toLocaleString('en-IN', {minimumFractionDigits:2, maximumFractionDigits:2}) : '50,000.00' %></h3>
                                        <button class="btn btn-sm btn-purple" data-bs-toggle="modal" data-bs-target="#setTargetModal" style="background-color: #6f42c1; color: white;">
                                            <i class="fas fa-edit me-1"></i> Set Target
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- Total Discount Given -->
                        <div class="col-md-4">
                            <div class="card border-warning shadow h-100">
                                <div class="card-body">
                                    <h5 class="card-title"><span role="img" aria-label="discount">🏷️</span> Total Discount</h5>
                                    <p class="card-text text-muted">Total discount given to customers</p>
                                    <h3 class="text-warning">₹<%= typeof totalDiscount !== 'undefined' ? totalDiscount.toLocaleString('en-IN', {minimumFractionDigits:2, maximumFractionDigits:2}) : '0.00' %></h3>
                                </div>
                            </div>
                        </div>
                        <!-- Total GST Collected -->
                        <div class="col-md-4">
                            <div class="card border-primary shadow h-100">
                                <div class="card-body">
                                    <h5 class="card-title"><span role="img" aria-label="tax">📝</span> Total GST</h5>
                                    <p class="card-text text-muted">Total GST collected on sales</p>
                                    <h3 class="text-primary">₹<%= typeof totalGST !== 'undefined' ? totalGST.toLocaleString('en-IN', {minimumFractionDigits:2, maximumFractionDigits:2}) : '0.00' %></h3>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- End Financial Insights section -->

                <!-- Chart.js Script (single import) -->
                <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
                
                <!-- SECTION 2: INCOME & EXPENSE TRACKER -->
                <div class="container my-5">
                    <h4 class="mb-4"><span role="img" aria-label="income-expense">🔷</span> INCOME & EXPENSE TRACKER</h4>
                    <div class="row g-4">
                        <!-- Today's Income -->
                        <div class="col-md-4">
                            <div class="card border-success shadow h-100">
                                <div class="card-body">
                                    <h5 class="card-title"><span role="img" aria-label="income">📈</span> Today's Income</h5>
                                    <p class="card-text text-muted">Total collection (cash + digital)</p>
                                    <h3 class="text-success">₹<%= typeof todayIncome !== 'undefined' ? todayIncome.toLocaleString('en-IN', {minimumFractionDigits:2, maximumFractionDigits:2}) : '0.00' %></h3>
                                </div>
                            </div>
                        </div>
                        <!-- Today's Expenses -->
                        <div class="col-md-4">
                            <div class="card border-danger shadow h-100">
                                <div class="card-body">
                                    <h5 class="card-title"><span role="img" aria-label="expenses">📤</span> Today's Expenses</h5>
                                    <p class="card-text text-muted">Expense entries added today</p>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h3 class="text-danger mb-0">₹<%= typeof todayExpenses !== 'undefined' ? todayExpenses.toLocaleString('en-IN', {minimumFractionDigits:2, maximumFractionDigits:2}) : '0.00' %></h3>
                                        <button class="btn btn-sm btn-danger" data-bs-toggle="modal" data-bs-target="#todayExpensesModal">
                                            <i class="fas fa-eye me-1"></i> View Details
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- Cash Flow Health -->
                        <div class="col-md-4">
                            <div class="card border-primary shadow h-100">
                                <div class="card-body d-flex flex-column justify-content-center align-items-center">
                                    <h5 class="card-title text-center"><span role="img" aria-label="health">📌</span> Cash Flow Health</h5>
                                    <p class="card-text text-muted text-center mb-2">Label: Good / Balanced / Critical</p>
                                    <% 
                                    let cashFlowStatus = "Critical";
                                    let badgeClass = "bg-danger";
                                    
                                    if (netProfitOrLoss > 0) {
                                        cashFlowStatus = "Good";
                                        badgeClass = "bg-success";
                                    } else if (netProfitOrLoss === 0) {
                                        cashFlowStatus = "Balanced";
                                        badgeClass = "bg-warning";
                                    }
                                    %>
                                    <span class="badge <%= badgeClass %> fs-5"><%= cashFlowStatus %></span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- End SECTION 2 -->
                
                <!-- SECTION 2.5: INCOME VS EXPENSE CHART -->
                <div class="container my-5">
                    <h4 class="mb-4"><span role="img" aria-label="chart">📊</span> WEEKLY INCOME VS EXPENSE OVERVIEW</h4>
                    <div class="row">
                        <div class="col-12">
                            <div class="card shadow">
                                <div class="card-body">
                                    <div class="chart-container" style="position: relative; height: 400px; width: 100%;">
                                        <canvas id="incomeExpenseChart"></canvas>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- End SECTION 2.5 -->
                
                <!-- Income vs Expense Chart Script -->
                <script>
                document.addEventListener("DOMContentLoaded", function() {
                    var chartElement = document.getElementById('incomeExpenseChart');
                    if (chartElement) {
                        var ctx2 = chartElement.getContext('2d');
                        new Chart(ctx2, {
                            type: 'bar',
                            data: {
                                labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
                                datasets: [
                                    {
                                        label: 'Income',
                                        data: [200, 300, 250, 400, 350, 500, 450],
                                        backgroundColor: 'rgba(40,167,69,0.7)'
                                    },
                                    {
                                        label: 'Expense',
                                        data: [150, 200, 180, 220, 210, 300, 280],
                                        backgroundColor: 'rgba(220,53,69,0.7)'
                                    }
                                ]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                plugins: { 
                                    legend: { display: true, position: 'top' },
                                    tooltip: { mode: 'index', intersect: false }
                                },
                                scales: { 
                                    y: { 
                                        beginAtZero: true,
                                        ticks: {
                                            callback: function(value) {
                                                return '₹' + value.toLocaleString('en-IN');
                                            }
                                        }
                                    }
                                }
                            }
                        });
                    } else {
                        console.warn('Canvas element with ID "incomeExpenseChart" not found. Chart will not be rendered.');
                    }
                });
                </script>
                
                <!-- SECTION 3: KHATA & CREDIT MANAGEMENT -->
                <div class="container my-5">
                    <h4 class="mb-4"><span role="img" aria-label="khata-credit">🔷</span> KHATA & CREDIT MANAGEMENT</h4>
                    <div class="row g-4">
                        <!-- Total Customer Khata Pending -->
                        <div class="col-md-4">
                            <div class="card border-warning shadow h-100">
                                <div class="card-body">
                                    <h5 class="card-title"><span role="img" aria-label="customer-khata">👥</span> Total Customer Khata Pending</h5>
                                    <p class="card-text text-muted">Amount to collect from customers</p>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h3 class="text-warning mb-0">₹<%= typeof totalCustomerKhataPending !== 'undefined' ? totalCustomerKhataPending.toLocaleString('en-IN', {minimumFractionDigits:2, maximumFractionDigits:2}) : '0.00' %></h3>
                                        <button class="btn btn-sm btn-warning" data-bs-toggle="modal" data-bs-target="#customerKhataModal">
                                            <i class="fas fa-eye me-1"></i> View Details
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- Total Supplier Khata Pending -->
                        <div class="col-md-4">
                            <div class="card border-danger shadow h-100">
                                <div class="card-body">
                                    <h5 class="card-title"><span role="img" aria-label="supplier-khata">🧾</span> Total Supplier Khata Pending</h5>
                                    <p class="card-text text-muted">Amount you need to pay to vendors</p>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h3 class="text-danger mb-0">₹<%= typeof totalSupplierKhataPending !== 'undefined' ? totalSupplierKhataPending.toLocaleString('en-IN', {minimumFractionDigits:2, maximumFractionDigits:2}) : '0.00' %></h3>
                                        <button class="btn btn-sm btn-danger" data-bs-toggle="modal" data-bs-target="#supplierKhataDetailsModal">
                                            <i class="fas fa-eye me-1"></i> View Details
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- Upcoming Due Dates -->
                        <div class="col-md-4">
                            <div class="card border-info shadow h-100">
                                <div class="card-body">
                                    <h5 class="card-title"><span role="img" aria-label="due-dates">🏷️</span> Upcoming Due Dates</h5>
                                    <p class="card-text text-muted">List bills/khata entries due in 3 days</p>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <ul class="list-group list-group-flush">
                                            <% if (typeof upcomingDueDates !== 'undefined' && upcomingDueDates.length > 0) { %>
                                                <% upcomingDueDates.slice(0, 3).forEach(function(item) { %>
                                                    <li class="list-group-item d-flex justify-content-between align-items-center px-0">
                                                        <span><%= item.supplier_name %></span>
                                                        <span class="text-danger fw-bold">₹<%= parseFloat(item.amount).toLocaleString('en-IN', {minimumFractionDigits:2, maximumFractionDigits:2}) %></span>
                                                        <span class="badge bg-warning text-dark"><%= new Date(item.due_date).toLocaleDateString('en-IN') %></span>
                                                    </li>
                                                <% }); %>
                                            <% } else { %>
                                                <li class="list-group-item d-flex justify-content-between align-items-center px-0">
                                                    <span>No upcoming dues</span>
                                                </li>
                                            <% } %>
                                        </ul>
                                        <button class="btn btn-sm btn-info text-white" data-bs-toggle="modal" data-bs-target="#upcomingDuesModal">
                                            <i class="fas fa-eye me-1"></i> View Details
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- End SECTION 3 -->
                <!-- SECTION 4: OTHER EXPENSES -->
                <div class="container my-5">
                    <h4 class="mb-4"><span role="img" aria-label="other-expenses">🔷</span> OTHER EXPENSES</h4>
                    <div class="row g-4">
                        <!-- Total Salaries Paid (This Month) -->
                        <div class="col-md-4">
                            <div class="card border-primary shadow h-100">
                                <div class="card-body">
                                    <h5 class="card-title"><span role="img" aria-label="salaries">👨‍🔧</span> Total Salaries Paid (<%= new Date().toLocaleString('en-US', {month: 'long', year: 'numeric'}) %>)</h5>
                                    <p class="card-text text-muted">Sum of all employee salaries paid this month</p>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h3 class="text-primary mb-0">₹<%= typeof totalSalaries !== 'undefined' ? totalSalaries.toLocaleString('en-IN', {minimumFractionDigits:2, maximumFractionDigits:2}) : '0.00' %></h3>
                                        <button class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#salaryDetailsModal">
                                            <i class="fas fa-eye me-1"></i> View Details
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- Inventory Cost -->
                        <div class="col-md-4">
                            <div class="card border-info shadow h-100">
                                <div class="card-body">
                                    <h5 class="card-title"><span role="img" aria-label="inventory-cost">📆</span> INVENTORY COST</h5>
                                    <p class="card-text text-muted">Inventory purchases this month</p>
                                    <h3 class="text-info">₹<%= typeof inventoryCost !== 'undefined' ? inventoryCost.toLocaleString('en-IN', {minimumFractionDigits:2, maximumFractionDigits:2}) : '0.00' %></h3>
                                </div>
                            </div>
                        </div>
                        <!-- Maintenances and Other Expenses -->
                        <div class="col-md-4">
                            <div class="card border-danger shadow h-100">
                                <div class="card-body">
                                    <h5 class="card-title"><span role="img" aria-label="maintenance">🛠️</span> MAINTENANCES & OTHER EXPENSES</h5>
                                    <p class="card-text text-muted">Repairs, utilities, and miscellaneous</p>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h3 class="text-danger mb-0">₹<%= typeof totalExpenses !== 'undefined' && typeof inventoryCost !== 'undefined' && typeof totalSalaries !== 'undefined' ? 
                                            (totalExpenses - inventoryCost - totalSalaries).toLocaleString('en-IN', {minimumFractionDigits:2, maximumFractionDigits:2}) : 
                                            '0.00' %></h3>
                                        <button class="btn btn-sm btn-danger" data-bs-toggle="modal" data-bs-target="#maintenanceExpensesModal">
                                            <i class="fas fa-eye me-1"></i> View Details
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- End SECTION -->


<!--*****************************************************************************************************************************************************************************************************************************************************************************************-->
                <!-- SECTION 5: FINANCE DETAILS -->
                <div class="container my-5">
                    <h4 class="mb-4"><span role="img" aria-label="finance-details">🔷</span> FINANCE DETAILS</h4>
                    <div class="row g-4">
                        <!-- MAINTENANCE & OTHER EXPENSES Form -->
                        <div class="col-lg-6 mb-4">
                            <div class="card border-danger shadow h-100">
                                <div class="card-body">
                                    <h5 class="card-title"><span role="img" aria-label="maintenance">�️</span> MAINTENANCE & OTHER EXPENSES</h5>
                                    <p class="card-text text-muted">Add new maintenance or other expense entries</p>
                                    
                                    <form id="maintenanceExpenseForm" class="mt-3">
                                        <div class="mb-3">
                                            <label for="expenseDate" class="form-label">Date</label>
                                            <input type="date" class="form-control" id="expenseDate" value="<%= new Date().toISOString().split('T')[0] %>" required>
                                        </div>
                                        
                                        <div class="mb-3">
                                            <label for="expenseType" class="form-label">Type</label>
                                            <select class="form-select" id="expenseType" required>
                                                <option value="" selected disabled>Select expense type</option>
                                                <option value="Rent">Rent</option>
                                                <option value="Maintenance">Maintenance</option>
                                                <option value="Repair">Repair</option>
                                                <option value="Electricity">Electricity</option>
                                                <option value="Water">Water</option>
                                                <option value="Internet">Internet</option>
                                                <option value="AMC">AMC</option>
                                                <option value="Miscellaneous">Miscellaneous</option>
                                            </select>
                                        </div>
                                        
                                        <div class="mb-3">
                                            <label for="expenseBrief" class="form-label">Brief</label>
                                            <input type="text" class="form-control" id="expenseBrief" placeholder="AC servicing, Light bill, etc." required>
                                        </div>
                                        
                                        <div class="mb-3">
                                            <label for="expenseAmount" class="form-label">Amount (₹)</label>
                                            <div class="input-group">
                                                <span class="input-group-text">₹</span>
                                                <input type="number" class="form-control" id="expenseAmount" min="1" placeholder="e.g., 1500" required>
                                            </div>
                                        </div>
                                        
                                        <button type="submit" class="btn btn-danger w-100">
                                            <i class="fas fa-plus-circle me-1"></i> Add Expense
                                        </button>
                                    </form>
                                </div>
                            </div>
                        </div>
                        
                        <!-- SUPPLIER KHATA DETAILS Form -->
                        <div class="col-lg-6 mb-4">
                            <div class="card border-warning shadow h-100">
                                <div class="card-body">
                                    <h5 class="card-title"><span role="img" aria-label="supplier-khata">🧾</span> SUPPLIER KHATA DETAILS</h5>
                                    <p class="card-text text-muted">Add new supplier khata entry</p>
                                    
                                    <form id="supplierKhataForm" class="mt-3">
                                        <div class="mb-3">
                                            <label for="supplierName" class="form-label">Supplier Name</label>
                                            <input type="text" class="form-control" id="supplierName" placeholder="Shree Hardware Co." required>
                                        </div>
                                        
                                        <div class="mb-3">
                                            <label for="supplierPhone" class="form-label">Phone Number</label>
                                            <input type="tel" class="form-control" id="supplierPhone" placeholder="9876543210" pattern="[0-9]{10}" required>
                                            <div class="form-text">Enter 10-digit phone number without country code</div>
                                        </div>
                                        
                                        <div class="mb-3">
                                            <label for="pendingAmount" class="form-label">Amount Pending</label>
                                            <div class="input-group">
                                                <span class="input-group-text">₹</span>
                                                <input type="number" class="form-control" id="pendingAmount" min="1" placeholder="15000" required>
                                            </div>
                                        </div>
                                        
                                        <div class="mb-3">
                                            <label for="dueDate" class="form-label">Due Date</label>
                                            <input type="date" class="form-control" id="dueDate" required>
                                        </div>
                                        
                                        <div class="mb-3">
                                            <label for="khataCycle" class="form-label">Khata Cycle</label>
                                            <select class="form-select" id="khataCycle" required>
                                                <option value="" selected disabled>Select cycle duration</option>
                                                <option value="15">15 days</option>
                                                <option value="30">30 days</option>
                                                <option value="45">45 days</option>
                                                <option value="60">60 days</option>
                                                <option value="90">90 days</option>
                                            </select>
                                        </div>
                                        
                                        <button type="submit" class="btn btn-warning w-100">
                                            <i class="fas fa-plus-circle me-1"></i> Add Supplier Khata
                                        </button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- End SECTION 5 -->
                
                <!-- Finance Details Form Handlers -->
                <script>
                // Utility function to display alerts
                function showAlert(message, type) {
                    // Create alert element
                    const alertDiv = document.createElement('div');
                    alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
                    alertDiv.role = 'alert';
                    
                    // Set alert content
                    alertDiv.innerHTML = `
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    `;
                    
                    // Find alert container or create one if it doesn't exist
                    let alertContainer = document.getElementById('alertContainer');
                    if (!alertContainer) {
                        alertContainer = document.createElement('div');
                        alertContainer.id = 'alertContainer';
                        alertContainer.className = 'container mt-3';
                        
                        // Insert alert container at the top of the content
                        const contentDiv = document.getElementById('content');
                        contentDiv.insertBefore(alertContainer, contentDiv.firstChild);
                    }
                    
                    // Add alert to container
                    alertContainer.appendChild(alertDiv);
                    
                    // Auto dismiss after 5 seconds
                    setTimeout(() => {
                        alertDiv.classList.remove('show');
                        setTimeout(() => alertDiv.remove(), 300);
                    }, 5000);
                }
                
                document.addEventListener("DOMContentLoaded", function() {
                    // Maintenance & Other Expenses Form Handler
                    const maintenanceExpenseForm = document.getElementById('maintenanceExpenseForm');
                    if (maintenanceExpenseForm) {
                        maintenanceExpenseForm.addEventListener('submit', function(e) {
                            e.preventDefault();
                            
                            // Get form values
                            const expenseDate = document.getElementById('expenseDate').value;
                            const expenseType = document.getElementById('expenseType').value;
                            const expenseBrief = document.getElementById('expenseBrief').value;
                            const expenseAmount = document.getElementById('expenseAmount').value;
                            
                            if (!expenseDate || !expenseType || !expenseBrief || !expenseAmount) {
                                showAlert('Please fill all required fields', 'danger');
                                return;
                            }
                            
                            // Format values for display
                            const formattedAmount = parseFloat(expenseAmount).toLocaleString('en-IN', {
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 2
                            });
                            
                            // Show loading state on button
                            const submitBtn = maintenanceExpenseForm.querySelector('button[type="submit"]');
                            const originalBtnText = submitBtn.innerHTML;
                            submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';
                            submitBtn.disabled = true;
                            
                            // Send data to the server
                            fetch('/finance/api/maintenance-expenses', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({
                                    entry_date: expenseDate,
                                    expense_type: expenseType,
                                    brief: expenseBrief,
                                    amount: expenseAmount
                                })
                            })
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error('Network response was not ok');
                                }
                                return response.json();
                            })
                            .then(data => {
                                // Reset form
                                maintenanceExpenseForm.reset();
                                document.getElementById('expenseDate').value = new Date().toISOString().split('T')[0];
                                
                                // Reset button state
                                submitBtn.innerHTML = originalBtnText;
                                submitBtn.disabled = false;
                                
                                // Show success message
                                showAlert(`Expense of ₹${formattedAmount} for ${expenseBrief} added successfully`, 'success');
                                
                                // Update the expenses display with new data
                                if (data.updatedData) {
                                    // Update today's expenses if the element exists
                                    const todayExpenseElement = document.querySelector('.card-title:contains("Today\'s Expenses")').closest('.card-body').querySelector('h3.text-danger');
                                    if (todayExpenseElement) {
                                        todayExpenseElement.textContent = `₹${data.updatedData.todayExpenses.toLocaleString('en-IN', {
                                            minimumFractionDigits: 2,
                                            maximumFractionDigits: 2
                                        })}`;
                                    }
                                    
                                    // Update total expenses if the element exists
                                    const totalExpenseElement = document.querySelector('.card-title:contains("Total Expenses")').closest('.card-body').querySelector('h3.text-danger');
                                    if (totalExpenseElement) {
                                        totalExpenseElement.textContent = `₹${data.updatedData.totalExpenses.toLocaleString('en-IN', {
                                            minimumFractionDigits: 2,
                                            maximumFractionDigits: 2
                                        })}`;
                                    }
                                }
                            })
                            .catch(error => {
                                console.error('Error adding expense:', error);
                                submitBtn.innerHTML = originalBtnText;
                                submitBtn.disabled = false;
                                showAlert('Failed to add expense. Please try again.', 'danger');
                            });
                        });
                    }
                    
                    // Supplier Khata Form Handler
                    const supplierKhataForm = document.getElementById('supplierKhataForm');
                    if (supplierKhataForm) {
                        supplierKhataForm.addEventListener('submit', function(e) {
                            e.preventDefault();
                            
                            // Get form values
                            const supplierName = document.getElementById('supplierName').value;
                            const supplierPhone = document.getElementById('supplierPhone').value;
                            const pendingAmount = document.getElementById('pendingAmount').value;
                            const dueDate = document.getElementById('dueDate').value;
                            const khataCycle = document.getElementById('khataCycle').value;
                            
                            if (!supplierName || !supplierPhone || !pendingAmount || !dueDate || !khataCycle) {
                                showAlert('Please fill all required fields', 'danger');
                                return;
                            }
                            
                            // Validate phone number
                            if (!/^\d{10}$/.test(supplierPhone)) {
                                showAlert('Please enter a valid 10-digit phone number', 'danger');
                                return;
                            }
                            
                            // Format values for display
                            const formattedAmount = parseFloat(pendingAmount).toLocaleString('en-IN', {
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 2
                            });
                            
                            // Show loading state on button
                            const submitBtn = supplierKhataForm.querySelector('button[type="submit"]');
                            const originalBtnText = submitBtn.innerHTML;
                            submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';
                            submitBtn.disabled = true;
                            
                            // Send data to the server
                            fetch('/finance/api/supplier-khata', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({
                                    supplier_name: supplierName,
                                    phone_number: supplierPhone,
                                    amount: pendingAmount,
                                    due_date: dueDate,
                                    khata_cycle: khataCycle
                                })
                            })
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error('Network response was not ok');
                                }
                                return response.json();
                            })
                            .then(data => {
                                // Reset form
                                supplierKhataForm.reset();
                                
                                // Reset button state
                                submitBtn.innerHTML = originalBtnText;
                                submitBtn.disabled = false;
                                
                                // Show success message
                                showAlert(`Supplier Khata for ${supplierName} with amount ₹${formattedAmount} added successfully`, 'success');
                                
                                // Update the supplier khata pending display with new data
                                if (data.updatedData) {
                                    // Update total supplier khata pending if the element exists
                                    const supplierKhataPendingElement = document.querySelector('.card-title:contains("Total Supplier Khata Pending")').closest('.card-body').querySelector('h3.text-danger');
                                    if (supplierKhataPendingElement) {
                                        supplierKhataPendingElement.textContent = `₹${data.updatedData.totalSupplierKhataPending.toLocaleString('en-IN', {
                                            minimumFractionDigits: 2,
                                            maximumFractionDigits: 2
                                        })}`;
                                    }
                                    
                                    // Update upcoming due dates if needed
                                    if (data.updatedData.upcomingDueDates && data.updatedData.upcomingDueDates.length > 0) {
                                        const upcomingDuesElement = document.querySelector('.card-title:contains("Upcoming Due Dates")').closest('.card-body').querySelector('ul.list-group');
                                        if (upcomingDuesElement) {
                                            upcomingDuesElement.innerHTML = data.updatedData.upcomingDueDates.map(due => `
                                                <li class="list-group-item d-flex justify-content-between align-items-center px-0">
                                                    <span>${due.supplier_name}</span>
                                                    <div>
                                                        <span class="badge bg-danger">₹${due.amount.toLocaleString('en-IN')}</span>
                                                        <small class="ms-2 text-muted">${new Date(due.due_date).toLocaleDateString()}</small>
                                                    </div>
                                                </li>
                                            `).join('') || '<li class="list-group-item d-flex justify-content-between align-items-center px-0"><span>No upcoming dues</span></li>';
                                        }
                                    }
                                }
                            })
                            .catch(error => {
                                console.error('Error adding supplier khata:', error);
                                submitBtn.innerHTML = originalBtnText;
                                submitBtn.disabled = false;
                                showAlert('Failed to add supplier khata. Please try again.', 'danger');
                            });
                        });
                    }
                    
                    // Function to show alert messages (reusing the one defined in the Customer Khata Modal Script)
                    // If the function doesn't exist in the global scope, define it here
                    if (typeof window.showAlert !== 'function') {
                        window.showAlert = function(message, type) {
                            // Create alert container if it doesn't exist
                            let alertContainer = document.querySelector('.alert-container');
                            if (!alertContainer) {
                                alertContainer = document.createElement('div');
                                alertContainer.className = 'alert-container position-fixed top-0 end-0 p-3';
                                alertContainer.style.zIndex = '1060';
                                document.body.appendChild(alertContainer);
                            }
                            
                            // Create alert
                            const alert = document.createElement('div');
                            alert.className = `alert alert-${type} alert-dismissible fade show`;
                            alert.innerHTML = `
                                ${message}
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            `;
                            
                            // Add to container
                            alertContainer.appendChild(alert);
                            
                            // Auto dismiss after 3 seconds
                            setTimeout(() => {
                                if (alert.parentNode === alertContainer) {
                                    alert.classList.remove('show');
                                    setTimeout(() => {
                                        if (alert.parentNode === alertContainer) {
                                            alertContainer.removeChild(alert);
                                        }
                                    }, 150);
                                }
                            }, 3000);
                        };
                    }
                    
                    // Initialize date fields with today's date
                    const todayStr = new Date().toISOString().split('T')[0];
                    if (document.getElementById('expenseDate')) {
                        document.getElementById('expenseDate').value = todayStr;
                    }
                    
                    // Set default due date to 30 days from now for supplier khata
                    if (document.getElementById('dueDate')) {
                        const thirtyDaysLater = new Date();
                        thirtyDaysLater.setDate(thirtyDaysLater.getDate() + 30);
                        document.getElementById('dueDate').value = thirtyDaysLater.toISOString().split('T')[0];
                    }
                });
                </script>
                
                <!-- Salary Details Modal Script -->
                <script>
                    document.addEventListener("DOMContentLoaded", function() {
                        // Get the modal element
                        const salaryModal = document.getElementById('salaryDetailsModal');
                        
                        // Add event listener for when the modal is shown
                        if (salaryModal) {
                            salaryModal.addEventListener('show.bs.modal', function () {
                                loadSalaryDetails();
                            });
                        }
                        
                        // Function to load salary details via AJAX
                        function loadSalaryDetails() {
                            const tableBody = document.getElementById('salaryDetailsTableBody');
                            
                            // Show loading spinner
                            tableBody.innerHTML = `
                                <tr>
                                    <td colspan="7" class="text-center">
                                        <div class="spinner-border text-primary" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                    </td>
                                </tr>
                            `;
                            
                            // Get current month and year for the API request
                            const date = new Date();
                            const monthYear = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;
                            
                            // Make AJAX request to get salary details
                            fetch(`/finance/api/salary-details?month_year=${monthYear}`)
                                .then(response => {
                                    if (!response.ok) {
                                        throw new Error('Network response was not ok');
                                    }
                                    return response.json();
                                })
                                .then(data => {
                                    if (data.length === 0) {
                                        tableBody.innerHTML = `
                                            <tr>
                                                <td colspan="7" class="text-center">No salary records found for this month</td>
                                            </tr>
                                        `;
                                        return;
                                    }
                                    
                                    // Clear table and add data
                                    tableBody.innerHTML = '';
                                    
                                    // Loop through data and create table rows
                                    data.forEach(salary => {
                                        const row = document.createElement('tr');
                                        
                                        // Format numbers with Indian number format
                                        const formatCurrency = (value) => {
                                            // Handle null, undefined, or NaN values
                                            const numValue = parseFloat(value || 0);
                                            return isNaN(numValue) ? '0.00' : numValue.toLocaleString('en-IN', {
                                                minimumFractionDigits: 2,
                                                maximumFractionDigits: 2
                                            });
                                        };
                                        
                                        // Format date
                                        const formatDate = (dateString) => {
                                            if (!dateString) return 'Not paid';
                                            const date = new Date(dateString);
                                            return date.toLocaleDateString('en-IN');
                                        };
                                        
                                        row.innerHTML = `
                                            <td>${salary.employee_name}</td>
                                            <td>₹${formatCurrency(salary.base_salary)}</td>
                                            <td>₹${formatCurrency(salary.bonus)}</td>
                                            <td>₹${formatCurrency(salary.deductions)}</td>
                                            <td>₹${formatCurrency(salary.leave_deduction)}</td>
                                            <td class="fw-bold">₹${formatCurrency(salary.final_salary)}</td>
                                            <td>${formatDate(salary.payment_date)}</td>
                                        `;
                                        
                                        tableBody.appendChild(row);
                                    });
                                })
                                .catch(error => {
                                    console.error('Error fetching salary details:', error);
                                    tableBody.innerHTML = `
                                        <tr>
                                            <td colspan="7" class="text-center text-danger">
                                                <i class="fas fa-exclamation-circle me-2"></i>
                                                Error loading salary details. Please try again.
                                            </td>
                                        </tr>
                                    `;
                                });
                        }
                    });
                </script>

                <!-- Set Target Modal -->
                <div class="modal fade" id="setTargetModal" tabindex="-1" aria-labelledby="setTargetModalLabel" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header" style="background-color: #6f42c1; color: white;">
                                <h5 class="modal-title" id="setTargetModalLabel">
                                    <i class="fas fa-bullseye me-2"></i> Set Monthly Sales Target
                                </h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" style="filter: invert(1);"></button>
                            </div>
                            <div class="modal-body">
                                <form id="targetForm">
                                    <div class="mb-3">
                                        <label for="targetAmount" class="form-label">Target Amount (₹)</label>
                                        <div class="input-group">
                                            <span class="input-group-text">₹</span>
                                            <input type="number" class="form-control" id="targetAmount" min="0" step="1000" 
                                                value="<%= typeof salesTarget !== 'undefined' ? salesTarget : 50000 %>" required>
                                        </div>
                                    </div>
                                    <div class="mb-3">
                                        <label for="targetMonth" class="form-label">Month</label>
                                        <select class="form-select" id="targetMonth">
                                            <% 
                                            const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
                                            const currentMonth = new Date().getMonth();
                                            for (let i = 0; i < months.length; i++) { 
                                            %>
                                                <option value="<%= i %>" <%= i === currentMonth ? 'selected' : '' %>><%= months[i] %></option>
                                            <% } %>
                                        </select>
                                    </div>
                                    <div class="mb-3">
                                        <label for="targetYear" class="form-label">Year</label>
                                        <select class="form-select" id="targetYear">
                                            <% 
                                            const currentYear = new Date().getFullYear();
                                            for (let year = currentYear - 1; year <= currentYear + 2; year++) { 
                                            %>
                                                <option value="<%= year %>" <%= year === currentYear ? 'selected' : '' %>><%= year %></option>
                                            <% } %>
                                        </select>
                                    </div>
                                </form>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                <button type="button" class="btn" id="saveTargetBtn" style="background-color: #6f42c1; color: white;">
                                    <i class="fas fa-save me-1"></i> Save Target
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Customer Khata Modal -->
                <div class="modal fade" id="customerKhataModal" tabindex="-1" aria-labelledby="customerKhataModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header bg-warning text-dark">
                                <h5 class="modal-title" id="customerKhataModalLabel">
                                    <i class="fas fa-users me-2"></i> Customers with Pending Credit
                                </h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead>
                                            <tr>
                                                <th>Customer Name</th>
                                                <th>Phone</th>
                                                <th>Last Purchase</th>
                                                <th>Pending Amount</th>
                                                <th>Due Date</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody id="customerKhataTableBody">
                                            <!-- This will be populated with actual data from the server -->
                                            <% if (typeof customerKhataDetails !== 'undefined' && customerKhataDetails && customerKhataDetails.length > 0) { %>
                                                <% customerKhataDetails.forEach(customer => { %>
                                                    <tr>
                                                        <td><%= customer.customer_name %></td>
                                                        <td><%= customer.customer_phone %></td>
                                                        <td><%= new Date(customer.bill_date).toLocaleDateString('en-IN') %></td>
                                                        <td class="text-warning fw-bold">₹<%= parseFloat(customer.grand_total).toLocaleString('en-IN', {minimumFractionDigits:2, maximumFractionDigits:2}) %></td>
                                                        <td>-</td>
                                                        <td>
                                                            <button class="btn btn-sm btn-success payment-btn" data-bill-id="<%= customer.bill_id %>">
                                                                <i class="fas fa-money-bill-wave"></i> Payment
                                                            </button>
                                                        </td>
                                                    </tr>
                                                <% }) %>
                                            <% } else { %>
                                                <tr>
                                                    <td colspan="6" class="text-center py-3">
                                                        <div class="alert alert-info mb-0">
                                                            <i class="fas fa-info-circle me-2"></i> No pending khata records found.
                                                        </div>
                                                    </td>
                                                </tr>
                                            <% } %>
                                            <!-- Sample data for preview purposes - these will show if no real data is available -->
                                            <% if ((typeof customerKhataDetails === 'undefined' || !customerKhataDetails || customerKhataDetails.length === 0) && 
                                                  (typeof customerKhataList === 'undefined' || !customerKhataList || customerKhataList.length === 0)) { %>
                                               
                                            <% } %>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                <button type="button" class="btn btn-primary" id="refreshKhataBtn">
                                    <i class="fas fa-sync-alt me-1"></i> Refresh Data
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Salary Details Modal -->
                <div class="modal fade" id="salaryDetailsModal" tabindex="-1" aria-labelledby="salaryDetailsModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header bg-primary text-white">
                                <h5 class="modal-title" id="salaryDetailsModalLabel">
                                    <i class="fas fa-money-bill-wave me-2"></i> Salary Details - <%= new Date().toLocaleString('en-US', {month: 'long', year: 'numeric'}) %>
                                </h5>
                                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <div class="table-responsive">
                                    <table class="table table-striped table-hover">
                                        <thead>
                                            <tr>
                                                <th>Employee</th>
                                                <th>Base Salary</th>
                                                <th>Bonus</th>
                                                <th>Deductions</th>
                                                <th>Leave Deduction</th>
                                                <th>Net Salary</th>
                                                <th>Payment Date</th>
                                            </tr>
                                        </thead>
                                        <tbody id="salaryDetailsTableBody">
                                            <!-- Data will be loaded here via AJAX -->
                                            <tr>
                                                <td colspan="7" class="text-center">
                                                    <div class="spinner-border text-primary" role="status">
                                                        <span class="visually-hidden">Loading...</span>
                                                    </div>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            </div>
                        </div>
                    </div>
                </div>

                <footer class="bg-white sticky-footer">
                <div class="container my-auto">
                    <div class="text-center my-auto copyright"><span>Copyright © business 360° 2025</span></div>
                </div>
            </footer>
        </div><a class="border rounded d-inline scroll-to-top" href="#page-top"><i class="fas fa-angle-up"></i></a>
    </div>
    
    <!-- Today's Expenses Modal -->
    <!-- Today's Expenses Modal -->
    <div class="modal fade" id="todayExpensesModal" tabindex="-1" aria-labelledby="todayExpensesModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="todayExpensesModalLabel">
                        <i class="fas fa-receipt me-2"></i> Expense Records
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="d-flex justify-content-between mb-3">
                        <div class="input-group" style="max-width: 450px;">
                            <span class="input-group-text"><i class="fas fa-calendar"></i></span>
                            <input type="date" class="form-control" id="expenseFilterDate" value="<%= new Date().toISOString().split('T')[0] %>">
                            <button class="btn btn-outline-secondary" type="button" id="filterExpensesByDate">
                                <i class="fas fa-filter"></i> Filter by Date
                            </button>
                            <button class="btn btn-outline-primary" type="button" id="showAllExpenses">
                                <i class="fas fa-list"></i> Show All
                            </button>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Type</th>
                                    <th>Description</th>
                                    <th>Amount</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="todayExpensesTableBody">
                                <!-- Data will be loaded here via AJAX -->
                                <tr>
                                    <td colspan="5" class="text-center">
                                        <div class="spinner-border text-primary" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="refreshTodayExpensesBtn">
                        <i class="fas fa-sync-alt me-1"></i> Refresh Data
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Upcoming Dues Modal -->
    <div class="modal fade" id="upcomingDuesModal" tabindex="-1" aria-labelledby="upcomingDuesModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-info text-white">
                    <h5 class="modal-title" id="upcomingDuesModalLabel">
                        <i class="fas fa-calendar-day me-2"></i> Upcoming Due Dates
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Supplier</th>
                                    <th>Amount</th>
                                    <th>Due Date</th>
                                    <th>Days Left</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="upcomingDuesTableBody">
                                <% if (typeof upcomingDueDates !== 'undefined' && upcomingDueDates.length > 0) { %>
                                    <% upcomingDueDates.forEach(function(item) { 
                                        const dueDate = new Date(item.due_date);
                                        const today = new Date();
                                        const diffTime = Math.abs(dueDate - today);
                                        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
                                    %>
                                        <tr>
                                            <td><%= item.supplier_name %></td>
                                            <td class="text-danger fw-bold">₹<%= parseFloat(item.amount).toLocaleString('en-IN', {minimumFractionDigits:2, maximumFractionDigits:2}) %></td>
                                            <td><%= dueDate.toLocaleDateString('en-IN') %></td>
                                            <td><span class="badge <%= diffDays <= 1 ? 'bg-danger' : 'bg-warning text-dark' %>"><%= diffDays %> days</span></td>
                                            <td>
                                                <button class="btn btn-sm btn-success payment-btn" data-supplier-id="<%= item.id %>">
                                                    <i class="fas fa-money-bill-wave"></i> Payment
                                                </button>
                                            </td>
                                        </tr>
                                    <% }); %>
                                <% } else { %>
                                    <tr>
                                        <td colspan="5" class="text-center">
                                            <div class="alert alert-info mb-0">
                                                <i class="fas fa-info-circle me-2"></i> No upcoming due dates in the next 3 days.
                                            </div>
                                        </td>
                                    </tr>
                                <% } %>
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="refreshUpcomingDuesBtn">
                        <i class="fas fa-sync-alt me-1"></i> Refresh Data
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Supplier Khata Details Modal -->
    <div class="modal fade" id="supplierKhataDetailsModal" tabindex="-1" aria-labelledby="supplierKhataDetailsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="supplierKhataDetailsModalLabel">
                        <i class="fas fa-file-invoice me-2"></i> Supplier Khata Details
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Supplier Name</th>
                                    <th>Phone</th>
                                    <th>Entry Date</th>
                                    <th>Amount</th>
                                    <th>Due Date</th>
                                    <th>Khata Cycle</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="supplierKhataTableBody">
                                <!-- Data will be loaded here via AJAX -->
                                <tr>
                                    <td colspan="7" class="text-center">
                                        <div class="spinner-border text-primary" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="refreshSupplierKhataBtn">
                        <i class="fas fa-sync-alt me-1"></i> Refresh Data
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Maintenance Expenses Modal -->
    <div class="modal fade" id="maintenanceExpensesModal" tabindex="-1" aria-labelledby="maintenanceExpensesModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="maintenanceExpensesModalLabel">
                        <i class="fas fa-tools me-2"></i> Maintenance & Other Expenses
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="d-flex justify-content-between mb-3">
                        <div class="input-group" style="max-width: 300px;">
                            <span class="input-group-text"><i class="fas fa-filter"></i></span>
                            <select class="form-select" id="maintenanceExpenseFilter">
                                <option value="all" selected>All Types</option>
                                <option value="Maintenance">Maintenance</option>
                                <option value="Utilities">Utilities</option>
                                <option value="Rent">Rent</option>
                                <option value="Miscellaneous">Miscellaneous</option>
                            </select>
                        </div>
                        <div class="input-group" style="max-width: 300px;">
                            <span class="input-group-text"><i class="fas fa-search"></i></span>
                            <input type="text" class="form-control" id="maintenanceExpenseSearch" placeholder="Search description...">
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Type</th>
                                    <th>Description</th>
                                    <th>Amount</th>
                                    <th>Created At</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="maintenanceExpensesTableBody">
                                <!-- Data will be loaded here via AJAX -->
                                <tr>
                                    <td colspan="6" class="text-center">
                                        <div class="spinner-border text-primary" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="refreshMaintenanceExpensesBtn">
                        <i class="fas fa-sync-alt me-1"></i> Refresh Data
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Salary Details Modal -->
    <div class="modal fade" id="salaryDetailsModal" tabindex="-1" aria-labelledby="salaryDetailsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="salaryDetailsModalLabel">
                        <i class="fas fa-money-bill-wave me-2"></i> Salary Details - <%= new Date().toLocaleString('en-US', {month: 'long', year: 'numeric'}) %>
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Employee</th>
                                    <th>Base Salary</th>
                                    <th>Bonus</th>
                                    <th>Deductions</th>
                                    <th>Leave Deduction</th>
                                    <th>Net Salary</th>
                                    <th>Payment Date</th>
                                </tr>
                            </thead>
                            <tbody id="salaryDetailsTableBody">
                                <!-- Data will be loaded here via AJAX -->
                                <tr>
                                    <td colspan="7" class="text-center">
                                        <div class="spinner-border text-primary" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Payment Method Selection Modal -->
    <div class="modal fade" id="paymentMethodModal" tabindex="-1" aria-labelledby="paymentMethodModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title" id="paymentMethodModalLabel">
                        <i class="fas fa-money-bill-wave me-2"></i> Select Payment Method
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="d-grid gap-2">
                        <button type="button" class="btn btn-lg btn-outline-success payment-method-btn" data-method="Cash">
                            <i class="fas fa-money-bill me-2"></i> Cash
                        </button>
                        <button type="button" class="btn btn-lg btn-outline-primary payment-method-btn" data-method="UPI">
                            <i class="fas fa-mobile-alt me-2"></i> UPI
                        </button>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
    
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="assets/bootstrap/js/bootstrap.min.js"></script>
    <script src="assets/js/chart.min.js"></script>
    <script src="assets/js/bs-init.js"></script>
    <script src="assets/js/Billing-Table-with-Add-Row--Fixed-Header-Feature-Billing-Table-with-Add-Row--Fixed-Header.js"></script>
    <script src="assets/js/Profile-Edit-Form-profile.js"></script>
    <script src="assets/js/theme.js"></script>
    <script src="assets/js/topnav.js"></script>
    
    <!-- Customer Khata Modal Script -->
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // Fetch data on page load
        fetchCustomerKhataData();
        loadTodayExpensesData();
        
        // Target Setting Functionality
        const saveTargetBtn = document.getElementById('saveTargetBtn');
        if (saveTargetBtn) {
            saveTargetBtn.addEventListener('click', function() {
                saveTargetSettings();
            });
        }
        
        // Function to save target settings
        function saveTargetSettings() {
            const targetAmount = document.getElementById('targetAmount').value;
            const targetMonth = document.getElementById('targetMonth').value;
            const targetYear = document.getElementById('targetYear').value;
            
            if (!targetAmount || isNaN(targetAmount) || targetAmount <= 0) {
                showAlert('Please enter a valid target amount', 'danger');
                return;
            }
            
            // Show loading state
            saveTargetBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';
            saveTargetBtn.disabled = true;
            
            // In a real implementation, you would send data to the server
            // For demo purposes, we'll simulate an API call
            setTimeout(function() {
                // This would be an actual fetch in production
                /*
                fetch('/finance/set-target', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        amount: targetAmount,
                        month: targetMonth,
                        year: targetYear
                    }),
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Update the UI with the new target
                        updateTargetDisplay(targetAmount);
                        $('#setTargetModal').modal('hide');
                        showAlert('Target successfully updated', 'success');
                    } else {
                        showAlert('Error: ' + data.message, 'danger');
                    }
                })
                .catch(error => {
                    console.error('Error saving target:', error);
                    showAlert('Failed to save target. Please try again.', 'danger');
                })
                .finally(() => {
                    // Reset button state
                    saveTargetBtn.innerHTML = '<i class="fas fa-save me-1"></i> Save Target';
                    saveTargetBtn.disabled = false;
                });
                */
                
                // For demo purposes, just update the UI
                const formattedAmount = parseFloat(targetAmount).toLocaleString('en-IN', {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                });
                
                // Update the target display in the card
                const targetDisplayElements = document.querySelectorAll('.card-body h3.text-purple');
                if (targetDisplayElements.length > 0) {
                    targetDisplayElements[0].innerHTML = '₹' + formattedAmount;
                }
                
                // Hide the modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('setTargetModal'));
                if (modal) modal.hide();
                
                // Show success message
                showAlert('Target successfully updated to ₹' + formattedAmount, 'success');
                
                // Reset button state
                saveTargetBtn.innerHTML = '<i class="fas fa-save me-1"></i> Save Target';
                saveTargetBtn.disabled = false;
            }, 1000);
        }
        
        // Function to show alert messages
        function showAlert(message, type) {
            // Create alert container if it doesn't exist
            let alertContainer = document.querySelector('.alert-container');
            if (!alertContainer) {
                alertContainer = document.createElement('div');
                alertContainer.className = 'alert-container position-fixed top-0 end-0 p-3';
                alertContainer.style.zIndex = '1060';
                document.body.appendChild(alertContainer);
            }
            
            // Create alert
            const alert = document.createElement('div');
            alert.className = `alert alert-${type} alert-dismissible fade show`;
            alert.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            
            // Add to container
            alertContainer.appendChild(alert);
            
            // Auto dismiss after 3 seconds
            setTimeout(() => {
                if (alert.parentNode === alertContainer) {
                    const bsAlert = new bootstrap.Alert(alert);
                    bsAlert.close();
                }
            }, 3000);
        }
        
        // Refresh Khata Data Button Click
        const refreshKhataBtn = document.getElementById('refreshKhataBtn');
        if (refreshKhataBtn) {
            refreshKhataBtn.addEventListener('click', function() {
                fetchCustomerKhataData();
            });
        }
        
        // Handle Payment Button Clicks
        document.addEventListener('click', function(e) {
            if (e.target.closest('.payment-btn')) {
                const billId = e.target.closest('.payment-btn').getAttribute('data-bill-id');
                if (billId) {
                    handleKhataPayment(billId);
                } else {
                    const customerId = e.target.closest('.payment-btn').getAttribute('data-customer-id');
                    if (customerId) {
                        // For sample data, show the modal but display a message after selection
                        window.currentBillId = 'sample_' + customerId;
                        const paymentMethodModal = new bootstrap.Modal(document.getElementById('paymentMethodModal'));
                        paymentMethodModal.show();
                    }
                }
            }
            
            // Handle supplier payment button clicks
            if (e.target.closest('.supplier-payment-btn')) {
                const supplierId = e.target.closest('.supplier-payment-btn').getAttribute('data-supplier-id');
                handleSupplierKhataPayment(supplierId);
            }
        });
        
        // Function to fetch customer khata data
        function fetchCustomerKhataData() {
            // Show loading state
            const tableBody = document.getElementById('customerKhataTableBody');
            if (tableBody) {
                tableBody.innerHTML = `
                    <tr>
                        <td colspan="6" class="text-center py-3">
                            <div class="d-flex justify-content-center">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                            <div class="mt-2">Loading khata data...</div>
                        </td>
                    </tr>
                `;
            }
            
            // Fetch customer khata data from the server
            fetch('/finance/api/customer-khata')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (tableBody) {
                        if (data && data.length > 0) {
                            let tableContent = '';
                            
                            // Populate the table with the returned data
                            data.forEach(customer => {
                                const billDate = new Date(customer.bill_date).toLocaleDateString('en-IN');
                                const amount = parseFloat(customer.grand_total).toLocaleString('en-IN', {
                                    minimumFractionDigits: 2,
                                    maximumFractionDigits: 2
                                });
                                
                                // Calculate due date (for display purposes)
                                const dueDate = new Date(customer.bill_date);
                                dueDate.setDate(dueDate.getDate() + 15); // Assuming 15 day credit period
                                const formattedDueDate = dueDate.toLocaleDateString('en-IN');
                                
                                tableContent += `
                                    <tr>
                                        <td>${customer.customer_name || 'Unknown'}</td>
                                        <td>${customer.customer_phone || 'N/A'}</td>
                                        <td>${billDate}</td>
                                        <td class="text-warning fw-bold">₹${amount}</td>
                                        <td>${formattedDueDate}</td>
                                        <td>
                                            <button class="btn btn-sm btn-success payment-btn" data-bill-id="${customer.bill_id}">
                                                <i class="fas fa-money-bill-wave"></i> Payment
                                            </button>
                                        </td>
                                    </tr>
                                `;
                            });
                            
                            tableBody.innerHTML = tableContent;
                            
                            // Update the total amount in the card
                            const totalAmount = data.reduce((sum, item) => sum + parseFloat(item.grand_total), 0);
                            const formattedTotalAmount = totalAmount.toLocaleString('en-IN', {
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 2
                            });
                            
                            // Helper function to find elements containing specific text
                            function querySelectorContains(selector, text) {
                                const elements = document.querySelectorAll(selector);
                                return Array.from(elements).find(el => el.textContent.includes(text));
                            }
                            
                            const totalAmountElement = querySelectorContains('.card-title', 'Total Customer Khata Pending')?.closest('.card-body')?.querySelector('h3.text-warning');
                            if (totalAmountElement) {
                                totalAmountElement.textContent = `₹${formattedTotalAmount}`;
                            }
                        } else {
                            // No data available
                            tableBody.innerHTML = `
                                <tr>
                                    <td colspan="6" class="text-center py-3">
                                        <div class="alert alert-info mb-0">
                                            <i class="fas fa-info-circle me-2"></i> No pending khata records found.
                                        </div>
                                    </td>
                                </tr>
                            `;
                        }
                    }
                })
                .catch(error => {
                    console.error('Error fetching khata data:', error);
                    if (tableBody) {
                        tableBody.innerHTML = `
                            <tr>
                                <td colspan="6" class="text-center py-3">
                                    <div class="alert alert-danger mb-0">
                                        <i class="fas fa-exclamation-circle me-2"></i> Failed to load customer khata data. Please try again.
                                    </div>
                                </td>
                            </tr>
                        `;
                    }
                });
        }
        
        // Helper function to show sample data when no real data is available
        function showSampleCustomerKhataData() {
            const tableBody = document.getElementById('customerKhataTableBody');
            if (tableBody) {
                tableBody.innerHTML = `
                    <tr>
                        <td>Rajesh Kumar</td>
                        <td>9876543210</td>
                        <td>15 Jul 2025</td>
                        <td class="text-warning fw-bold">₹2,500.00</td>
                        <td>30 Jul 2025</td>
                        <td>
                            <button class="btn btn-sm btn-success payment-btn" data-bill-id="sample1">
                                <i class="fas fa-money-bill-wave"></i> Payment
                            </button>
                        </td>
                    </tr>
                    <tr>
                        <td>Priya Sharma</td>
                        <td>8765432109</td>
                        <td>10 Jul 2025</td>
                        <td class="text-warning fw-bold">₹1,750.00</td>
                        <td>25 Jul 2025</td>
                        <td>
                            <button class="btn btn-sm btn-success payment-btn" data-bill-id="sample2">
                                <i class="fas fa-money-bill-wave"></i> Payment
                            </button>
                        </td>
                    </tr>
                    <tr>
                        <td>Vikram Singh</td>
                        <td>7654321098</td>
                        <td>12 Jul 2025</td>
                        <td class="text-warning fw-bold">₹3,200.00</td>
                        <td>27 Jul 2025</td>
                        <td>
                            <button class="btn btn-sm btn-success payment-btn" data-bill-id="sample3">
                                <i class="fas fa-money-bill-wave"></i> Payment
                            </button>
                        </td>
                    </tr>
                `;
            }
        }
        
        // Function to handle khata payment
        function handleKhataPayment(billId) {
            // Store the bill ID for the payment modal
            window.currentBillId = billId;
            
            // Show the payment method selection modal
            const paymentMethodModal = new bootstrap.Modal(document.getElementById('paymentMethodModal'));
            paymentMethodModal.show();
        }
        
        // Event listener for payment method buttons
        
        // Event listener for payment method buttons
        document.addEventListener('click', function(e) {
            if (e.target.closest('.payment-method-btn')) {
                const paymentMethod = e.target.closest('.payment-method-btn').getAttribute('data-method');
                const billId = window.currentBillId;
                
                if (!billId) return;
                
                // Hide the modal
                const paymentMethodModal = bootstrap.Modal.getInstance(document.getElementById('paymentMethodModal'));
                paymentMethodModal.hide();
                
                // Process the payment with the selected method
                processKhataPayment(billId, paymentMethod);
            }
        });
        
        // Function to process the khata payment after method selection
        function processKhataPayment(billId, paymentMethod) {
            // Check if this is a sample entry
            if (billId.startsWith('sample_')) {
                // Show a sample message for demonstration
                alert(`This is a sample entry. In a real system, a ${paymentMethod} payment would be processed.`);
                return;
            }
            
            // Show loading state
            const button = document.querySelector(`.payment-btn[data-bill-id="${billId}"]`);
            if (button) {
                const originalText = button.innerHTML;
                button.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing...';
                button.disabled = true;
                
                // Send the payment to the server
                fetch('/finance/api/customer-khata/payment', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        billId: billId,
                        paymentMethod: paymentMethod
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    // Show success message
                    alert(`Payment recorded successfully! Method: ${paymentMethod}`);
                    
                    // Update the khata details
                    // Helper function to find elements containing specific text
                    function querySelectorContains(selector, text) {
                        const elements = document.querySelectorAll(selector);
                        return Array.from(elements).find(el => el.textContent.includes(text));
                    }
                    
                    const totalAmountElement = querySelectorContains('.card-title', 'Total Customer Khata Pending')?.closest('.card-body')?.querySelector('h3.text-warning');
                    if (totalAmountElement && data.updatedData && data.updatedData.totalCustomerKhataPending !== undefined) {
                        const formattedAmount = parseFloat(data.updatedData.totalCustomerKhataPending).toLocaleString('en-IN', {
                            minimumFractionDigits: 2,
                            maximumFractionDigits: 2
                        });
                        totalAmountElement.textContent = `₹${formattedAmount}`;
                    }
                    
                    // Refresh the khata table
                    fetchCustomerKhataData();
                })
                .catch(error => {
                    console.error('Error processing payment:', error);
                    alert('Failed to process payment. Please try again.');
                    if (button) {
                        button.innerHTML = originalText;
                        button.disabled = false;
                    }
                });
            }
        }
        
        // Function to handle supplier khata payment
        function handleSupplierKhataPayment(supplierId) {
            // Show confirmation dialog
            if (!confirm('Are you sure you want to mark this supplier payment as complete? This action cannot be undone.')) {
                return;
            }
            
            // Find the button that was clicked to show loading state
            const button = document.querySelector(`.supplier-payment-btn[data-supplier-id="${supplierId}"]`);
            if (button) {
                const originalHTML = button.innerHTML;
                button.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing...';
                button.disabled = true;
                
                // Send request to the server to mark this payment as complete
                fetch(`/finance/api/supplier-khata/${supplierId}/pay`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ id: supplierId })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    // Remove the row from the table
                    const row = button.closest('tr');
                    if (row) {
                        row.style.backgroundColor = '#d4edda';
                        setTimeout(() => {
                            row.remove();
                        }, 500);
                    }
                    
                    // Update the total supplier khata pending amount
                    if (data.updatedTotalPending !== undefined) {
                        // Helper function to find elements with specific text
                        function querySelectorContains(selector, text) {
                            const elements = document.querySelectorAll(selector);
                            return Array.from(elements).find(el => el.textContent.includes(text));
                        }
                        
                        const supplierKhataPendingElement = querySelectorContains('.card-title', 'Total Supplier Khata Pending')
                            .closest('.card-body').querySelector('h3.text-danger');
                            
                        if (supplierKhataPendingElement) {
                            supplierKhataPendingElement.textContent = `₹${data.updatedTotalPending.toLocaleString('en-IN', {
                                maximumFractionDigits: 2
                            })}`;
                        }
                    }
                    
                    // Show success message
                    showAlert('Supplier payment has been marked as complete!', 'success');
                })
                .catch(error => {
                    console.error('Error processing supplier payment:', error);
                    // Reset button state
                    if (button) {
                        button.innerHTML = originalHTML;
                        button.disabled = false;
                    }
                    
                    // Show error message
                    showAlert('Failed to process supplier payment. Please try again.', 'danger');
                });
            }
        }
        
        // Today's Expenses Modal Refresh Button
        const refreshTodayExpensesBtn = document.getElementById('refreshTodayExpensesBtn');
        if (refreshTodayExpensesBtn) {
            refreshTodayExpensesBtn.addEventListener('click', function() {
                refreshTodayExpensesData();
            });
        }
        
        // Upcoming Dues Modal Refresh Button
        const refreshUpcomingDuesBtn = document.getElementById('refreshUpcomingDuesBtn');
        if (refreshUpcomingDuesBtn) {
            refreshUpcomingDuesBtn.addEventListener('click', function() {
                refreshUpcomingDuesData();
            });
        }
        
        // Supplier Khata Modal Refresh Button
        const refreshSupplierKhataBtn = document.getElementById('refreshSupplierKhataBtn');
        if (refreshSupplierKhataBtn) {
            refreshSupplierKhataBtn.addEventListener('click', function() {
                refreshSupplierKhataData();
            });
        }
        
        // Maintenance Expenses Modal Refresh Button
        const refreshMaintenanceExpensesBtn = document.getElementById('refreshMaintenanceExpensesBtn');
        if (refreshMaintenanceExpensesBtn) {
            refreshMaintenanceExpensesBtn.addEventListener('click', function() {
                refreshMaintenanceExpensesData();
            });
        }
        
        // Maintenance Expense Filter
        const maintenanceExpenseFilter = document.getElementById('maintenanceExpenseFilter');
        if (maintenanceExpenseFilter) {
            maintenanceExpenseFilter.addEventListener('change', function() {
                filterMaintenanceExpenses();
            });
        }
        
        // Maintenance Expense Search
        const maintenanceExpenseSearch = document.getElementById('maintenanceExpenseSearch');
        if (maintenanceExpenseSearch) {
            maintenanceExpenseSearch.addEventListener('input', function() {
                filterMaintenanceExpenses();
            });
        }
        
        // Function to filter maintenance expenses
        function filterMaintenanceExpenses() {
            const filterValue = maintenanceExpenseFilter.value;
            const searchValue = maintenanceExpenseSearch.value.toLowerCase();
            const rows = document.querySelectorAll('#maintenanceExpensesTableBody tr');
            
            rows.forEach(row => {
                const typeCell = row.cells[1].textContent.trim();
                const briefCell = row.cells[2].textContent.toLowerCase();
                
                const matchesFilter = filterValue === 'all' || typeCell === filterValue;
                const matchesSearch = !searchValue || briefCell.includes(searchValue);
                
                row.style.display = matchesFilter && matchesSearch ? '' : 'none';
            });
        }
        
        // Load Supplier Khata details
        const supplierKhataModal = document.getElementById('supplierKhataDetailsModal');
        if (supplierKhataModal) {
            supplierKhataModal.addEventListener('show.bs.modal', function() {
                loadSupplierKhataData();
            });
        }
        
        // Load Today's Expenses details
        const todayExpensesModal = document.getElementById('todayExpensesModal');
        if (todayExpensesModal) {
            todayExpensesModal.addEventListener('show.bs.modal', function() {
                loadTodayExpensesData();
            });
            
            // Add event listeners for expense date filter buttons after modal is loaded
            todayExpensesModal.addEventListener('shown.bs.modal', function() {
                const filterExpensesByDateBtn = document.getElementById('filterExpensesByDate');
                if (filterExpensesByDateBtn) {
                    filterExpensesByDateBtn.addEventListener('click', function() {
                        filterExpensesByDate();
                    });
                }
                
                const showAllExpensesBtn = document.getElementById('showAllExpenses');
                if (showAllExpensesBtn) {
                    showAllExpensesBtn.addEventListener('click', function() {
                        showAllExpensesData();
                    });
                }
            });
        }
        
        // Load Upcoming Dues details
        const upcomingDuesModal = document.getElementById('upcomingDuesModal');
        if (upcomingDuesModal) {
            upcomingDuesModal.addEventListener('show.bs.modal', function() {
                loadUpcomingDuesData();
            });
        }
        
        // Load Maintenance Expenses details
        const maintenanceExpensesModal = document.getElementById('maintenanceExpensesModal');
        if (maintenanceExpensesModal) {
            maintenanceExpensesModal.addEventListener('show.bs.modal', function() {
                loadMaintenanceExpensesData();
            });
        }
        
        // Helper function to mimic jQuery's :contains selector
        function querySelectorContains(selector, text) {
            const elements = document.querySelectorAll(selector);
            return Array.from(elements).find(el => el.textContent.includes(text));
        }
        
        // Function to load supplier khata data
        function loadSupplierKhataData() {
            const tableBody = document.getElementById('supplierKhataTableBody');
            if (!tableBody) return;
            
            // Show loading state
            tableBody.innerHTML = `
                <tr>
                    <td colspan="7" class="text-center py-3">
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                        <div class="mt-2">Loading supplier khata data...</div>
                    </td>
                </tr>
            `;
            
            // Fetch supplier khata data from the API
            fetch('/finance/api/supplier-khata')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.length === 0) {
                        tableBody.innerHTML = `
                            <tr>
                                <td colspan="7" class="text-center py-3">
                                    <div class="alert alert-info mb-0">
                                        <i class="fas fa-info-circle me-2"></i> No supplier khata entries found.
                                    </div>
                                </td>
                            </tr>
                        `;
                        return;
                    }
                    
                    // Format and display the data
                    let html = '';
                    data.forEach(item => {
                        const entryDate = new Date(item.entry_date).toLocaleDateString('en-IN');
                        const dueDate = new Date(item.due_date).toLocaleDateString('en-IN');
                        const createdAt = new Date(item.created_at).toLocaleDateString('en-IN');
                        
                        html += `
                            <tr>
                                <td>${item.supplier_name}</td>
                                <td>${item.phone_number}</td>
                                <td>${entryDate}</td>
                                <td class="text-danger fw-bold">₹${parseFloat(item.amount).toLocaleString('en-IN', {minimumFractionDigits:2, maximumFractionDigits:2})}</td>
                                <td>${dueDate}</td>
                                <td>${item.khata_cycle} days</td>
                                <td>
                                    <button class="btn btn-sm btn-success supplier-payment-btn" data-supplier-id="${item.id}">
                                        <i class="fas fa-money-bill-wave"></i> Payment
                                    </button>
                                </td>
                            </tr>
                        `;
                    });
                    
                    tableBody.innerHTML = html;
                    
                    // Also update the total in the card view
                    const totalAmount = data.reduce((sum, item) => sum + parseFloat(item.amount), 0);
                    const supplierKhataCardTitle = querySelectorContains('.card-title', 'Total Supplier Khata Pending');
                    if (supplierKhataCardTitle) {
                        const supplierKhataElement = supplierKhataCardTitle.closest('.card-body').querySelector('h3.text-danger');
                        if (supplierKhataElement) {
                            supplierKhataElement.textContent = `₹${totalAmount.toLocaleString('en-IN', {minimumFractionDigits:2, maximumFractionDigits:2})}`;
                        }
                    }
                })
                .catch(error => {
                    console.error('Error fetching supplier khata data:', error);
                    tableBody.innerHTML = `
                        <tr>
                            <td colspan="7" class="text-center py-3">
                                <div class="alert alert-danger mb-0">
                                    <i class="fas fa-exclamation-circle me-2"></i> Error loading data. Please try again.
                                </div>
                            </td>
                        </tr>
                    `;
                });
        }
        
        // Function to load upcoming dues data
        function loadUpcomingDuesData() {
            const tableBody = document.getElementById('upcomingDuesTableBody');
            if (!tableBody) return;
            
            // Show loading state
            tableBody.innerHTML = `
                <tr>
                    <td colspan="5" class="text-center py-3">
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                        <div class="mt-2">Loading upcoming dues data...</div>
                    </td>
                </tr>
            `;
            
            // Fetch upcoming dues data - we'll reuse the supplier khata endpoint
            // but filter for upcoming dates on the client side
            fetch('/finance/api/supplier-khata')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    // Filter for upcoming dues (next 3 days)
                    const today = new Date();
                    const threeDaysLater = new Date();
                    threeDaysLater.setDate(today.getDate() + 3);
                    
                    const upcomingDues = data.filter(item => {
                        const dueDate = new Date(item.due_date);
                        return dueDate >= today && dueDate <= threeDaysLater;
                    });
                    
                    if (upcomingDues.length === 0) {
                        tableBody.innerHTML = `
                            <tr>
                                <td colspan="5" class="text-center py-3">
                                    <div class="alert alert-info mb-0">
                                        <i class="fas fa-info-circle me-2"></i> No upcoming due dates in the next 3 days.
                                    </div>
                                </td>
                            </tr>
                        `;
                        return;
                    }
                    
                    // Format and display the data
                    let html = '';
                    upcomingDues.forEach(item => {
                        const dueDate = new Date(item.due_date);
                        const diffTime = Math.abs(dueDate - today);
                        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
                        
                        html += `
                            <tr>
                                <td>${item.supplier_name}</td>
                                <td class="text-danger fw-bold">₹${parseFloat(item.amount).toLocaleString('en-IN', {minimumFractionDigits:2, maximumFractionDigits:2})}</td>
                                <td>${dueDate.toLocaleDateString('en-IN')}</td>
                                <td><span class="badge ${diffDays <= 1 ? 'bg-danger' : 'bg-warning text-dark'}">${diffDays} days</span></td>
                                <td>
                                    <button class="btn btn-sm btn-success payment-btn" data-supplier-id="${item.id}">
                                        <i class="fas fa-money-bill-wave"></i> Payment
                                    </button>
                                </td>
                            </tr>
                        `;
                    });
                    
                    tableBody.innerHTML = html;
                    
                    // Update the upcoming dues list in the card view
                    const upcomingDuesCardTitle = querySelectorContains('.card-title', 'Upcoming Due Dates');
                    if (upcomingDuesCardTitle) {
                        const upcomingDuesList = upcomingDuesCardTitle.closest('.card-body').querySelector('ul.list-group');
                        if (upcomingDuesList) {
                            let listHtml = '';
                            upcomingDues.slice(0, 3).forEach(item => {
                                const dueDate = new Date(item.due_date).toLocaleDateString('en-IN');
                                listHtml += `
                                    <li class="list-group-item d-flex justify-content-between align-items-center px-0">
                                        <span>${item.supplier_name}</span>
                                        <span class="text-danger fw-bold">₹${parseFloat(item.amount).toLocaleString('en-IN', {minimumFractionDigits:2, maximumFractionDigits:2})}</span>
                                        <span class="badge bg-warning text-dark">${dueDate}</span>
                                    </li>
                                `;
                            });
                            
                            if (listHtml === '') {
                                listHtml = `
                                    <li class="list-group-item d-flex justify-content-between align-items-center px-0">
                                        <span>No upcoming dues</span>
                                    </li>
                                `;
                            }
                            
                            upcomingDuesList.innerHTML = listHtml;
                        }
                    }
                })
                .catch(error => {
                    console.error('Error fetching upcoming dues data:', error);
                    tableBody.innerHTML = `
                        <tr>
                            <td colspan="5" class="text-center py-3">
                                <div class="alert alert-danger mb-0">
                                    <i class="fas fa-exclamation-circle me-2"></i> Error loading data. Please try again.
                                </div>
                            </td>
                        </tr>
                    `;
                });
        }
        
        // Function to load maintenance expenses data
        function loadMaintenanceExpensesData() {
            const tableBody = document.getElementById('maintenanceExpensesTableBody');
            if (!tableBody) return;
            
            // Show loading state
            tableBody.innerHTML = `
                <tr>
                    <td colspan="6" class="text-center py-3">
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                        <div class="mt-2">Loading maintenance expenses data...</div>
                    </td>
                </tr>
            `;
            
            // Fetch maintenance expenses data from the API
            fetch('/finance/api/maintenance-expenses')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.length === 0) {
                        tableBody.innerHTML = `
                            <tr>
                                <td colspan="6" class="text-center py-3">
                                    <div class="alert alert-info mb-0">
                                        <i class="fas fa-info-circle me-2"></i> No maintenance expenses found.
                                    </div>
                                </td>
                            </tr>
                        `;
                        return;
                    }
                    
                    // Format and display the data
                    let html = '';
                    data.forEach(item => {
                        const entryDate = new Date(item.entry_date).toLocaleDateString('en-IN');
                        const createdAt = new Date(item.created_at).toLocaleDateString('en-IN');
                        
                        html += `
                            <tr>
                                <td>${entryDate}</td>
                                <td>${item.expense_type}</td>
                                <td>${item.brief}</td>
                                <td class="text-danger fw-bold">₹${parseFloat(item.amount).toLocaleString('en-IN', {minimumFractionDigits:2, maximumFractionDigits:2})}</td>
                                <td>${createdAt}</td>
                                <td>
                                    <button class="btn btn-sm btn-info text-white view-receipt-btn" data-expense-id="${item.id}">
                                        <i class="fas fa-receipt"></i> View Receipt
                                    </button>
                                </td>
                            </tr>
                        `;
                    });
                    
                    tableBody.innerHTML = html;
                    // Apply filter if needed
                    if (document.getElementById('maintenanceExpenseFilter').value !== 'all' || 
                        document.getElementById('maintenanceExpenseSearch').value.trim() !== '') {
                        filterMaintenanceExpenses();
                    }
                })
                .catch(error => {
                    console.error('Error fetching maintenance expenses data:', error);
                    tableBody.innerHTML = `
                        <tr>
                            <td colspan="6" class="text-center py-3">
                                <div class="alert alert-danger mb-0">
                                    <i class="fas fa-exclamation-circle me-2"></i> Error loading data. Please try again.
                                </div>
                            </td>
                        </tr>
                    `;
                });
        }
        
        // Functions to refresh data in each modal
        function refreshTodayExpensesData() {
            loadTodayExpensesData();
        }
        
        function refreshUpcomingDuesData() {
            loadUpcomingDuesData();
        }
        
        function refreshSupplierKhataData() {
            loadSupplierKhataData();
        }
        
        function refreshMaintenanceExpensesData() {
            loadMaintenanceExpensesData();
        }
        
        // Function to load today's expenses
        function loadTodayExpensesData() {
            const tableBody = document.getElementById('todayExpensesTableBody');
            if (!tableBody) return;
            
            // Show loading state
            tableBody.innerHTML = `
                <tr>
                    <td colspan="5" class="text-center py-3">
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                        <div class="mt-2">Loading expenses data...</div>
                    </td>
                </tr>
            `;
            
            // Get today's date in YYYY-MM-DD format
            const today = new Date().toISOString().split('T')[0];
            
            // Fetch maintenance expenses data and filter for today
            fetch('/finance/api/maintenance-expenses')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    // Filter for today's expenses only
                    const todayExpenses = data.filter(item => {
                        const itemDate = new Date(item.entry_date).toISOString().split('T')[0];
                        return itemDate === today;
                    });
                    
                    if (todayExpenses.length === 0) {
                        tableBody.innerHTML = `
                            <tr>
                                <td colspan="5" class="text-center py-3">
                                    <div class="alert alert-info mb-0">
                                        <i class="fas fa-info-circle me-2"></i> No expenses recorded.
                                    </div>
                                </td>
                            </tr>
                        `;
                        return;
                    }
                    
                    // Format and display the data
                    let html = '';
                    let totalTodayExpense = 0;
                    
                    todayExpenses.forEach(item => {
                        const amount = parseFloat(item.amount);
                        totalTodayExpense += amount;
                        
                        // Format the date properly
                        const entryDate = new Date(item.entry_date);
                        const formattedDate = entryDate.toLocaleDateString('en-IN');
                        
                        html += `
                            <tr>
                                <td>${formattedDate}</td>
                                <td>${item.expense_type}</td>
                                <td>${item.brief}</td>
                                <td class="text-danger fw-bold">₹${amount.toLocaleString('en-IN', {minimumFractionDigits:2, maximumFractionDigits:2})}</td>
                                <td>
                                    <button class="btn btn-sm btn-info text-white view-receipt-btn" data-expense-id="${item.id}">
                                        <i class="fas fa-receipt"></i> View Receipt
                                    </button>
                                </td>
                            </tr>
                        `;
                    });
                    
                    // Add a total row
                    html += `
                        <tr class="table-secondary">
                            <td colspan="3" class="text-end fw-bold">Total:</td>
                            <td colspan="2" class="text-danger fw-bold">₹${totalTodayExpense.toLocaleString('en-IN', {minimumFractionDigits:2, maximumFractionDigits:2})}</td>
                        </tr>
                    `;
                    
                    tableBody.innerHTML = html;
                    
                    // Update the Today's Expenses card
                    const todayExpensesCardTitle = querySelectorContains('.card-title', 'Today\'s Expenses');
                    if (todayExpensesCardTitle) {
                        const todayExpensesElement = todayExpensesCardTitle.closest('.card-body').querySelector('h3.text-danger');
                        if (todayExpensesElement) {
                            todayExpensesElement.textContent = `₹${totalTodayExpense.toLocaleString('en-IN', {minimumFractionDigits:2, maximumFractionDigits:2})}`;
                        }
                    }
                })
                .catch(error => {
                    console.error('Error fetching expenses data:', error);
                    tableBody.innerHTML = `
                        <tr>
                            <td colspan="5" class="text-center py-3">
                                <div class="alert alert-danger mb-0">
                                    <i class="fas fa-exclamation-circle me-2"></i> Error loading data. Please try again.
                                </div>
                            </td>
                        </tr>
                    `;
                });
        }
    });
    </script>

</body>

</html>